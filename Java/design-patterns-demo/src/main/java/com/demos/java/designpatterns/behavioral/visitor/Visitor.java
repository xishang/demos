package com.demos.java.designpatterns.behavioral.visitor;

/**
 * @author xishang
 * @version 1.0
 * @date 2018/1/10
 * <p>
 * 访问者模式: 提供一个作用于某对象结构中的各元素的操作表示, 它使我们可以在不改变各元素的类的前提下定义作用于这些元素的新操作
 * 概念:
 * => 静态分派: 发生在编译期, 根据静态类型分派, 如: 方法重载
 * => 动态分派: 发生在运行期, 动态地置换掉某个方法, 如: 多态
 * => 宗量: 方法的接收者(方法所属的对象)与方法的参数统称为方法的宗量
 * => 单分派语言(Uni-Dispatch): 根据一个宗量的类型进行对方法的选择, C++和Java均是单分派语言
 * => 多分派语言(Multi-Dispatch): 根据多于一个的宗量的类型对方法进行选择
 * -> Java是动态的单分派语言: Java的动态分派仅仅会考虑到方法的接收者的类型
 * -> Java同时又是静态的多分派语言: Java对重载方法的分派会考虑到方法的接收者的类型以及方法的所有参数的类型
 * Java语言不支持动态的多分派, 但是通过使用设计模式, 也可以在Java语言里实现动态的双重分派
 * 优点:
 * 1.添加新的访问操作只需新增一个具体访问者类, 符合"开闭原则"
 * 2.将有关元素对象的访问行为集中到一个访问者对象中, 类的职责更加清晰
 * 缺点:
 * 1.添加新的元素类需要修改现有访问者类的代码, 不符合"开闭原则"
 * 2.元素对象必须暴露一些自己的内部操作和内部状态, 以供访问者调用, 破坏了"封装"
 */
public interface Visitor {

    void visit(Engine engine);

    void visit(Wheel wheel);

}
