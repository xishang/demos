# encoding:utf-8

# python逻辑运算Demo

# ''' 定义多行字符串 -----------------------------------------------------------------------
longStr = '''
    his name is:
    James
'''
# \ 转义换行符，进行多行运算 ----------------------------------------------------------------
s = 1 + 2 \
    + 3 + 4
# 输出：10
print(s)

# 序列解包 ---------------------------------------------------------------------------------
# 多个变量赋值 -----------------------------------------------------------------------------
x, y, z = 1, 2, 3
# 输出：(1, 2, 3)
print(x, y, z)
# 变量交换 ---------------------------------------------------------------------------------
x, y = y, x
# 输出：(2, 1)
print(x, y)
values = 1, 2, 3
print(values)
x, y, z = values
# '*'赋值[3.x特性]，其他变量赋值后剩下的作为一个列表赋值给'*'变量 ------------------------------
a, b, *rest, c = [1, 2, 3, 4, 5, 6]
# 输出：1 2 6 [3, 4, 5]
print(a, b, c, rest)
*rest, a, b = [1, 2, 3]
# 输出：2 3 [1]
print(a, b, rest)
# 链式赋值 ---------------------------------------------------------------------------------
x = y = 1
# 输出：1 1
print(x, y)
# 增量赋值 ---------------------------------------------------------------------------------
a = 2
a += 1
# 输出：3
print(a)
# 语句块：以':'开始，以'缩进回退'结束 --------------------------------------------------------
# 条件语句 ---------------------------------------------------------------------------------
# False: False, None, 0, '', (), [], {}
# name = input('What is your name?')
name = 'James'
if name.endswith('James'):
    print('Hello, Mr. James')
elif name.endswith('Green'):
    if name.startswith('Mrs'):
        print('Hello, Mrs. Green')
    else:
        print('Hello, Mr. Green')
else:
    print('Hello, Mr.', name)
# 比较运算符 --------------------------------------------------------------------------------
# [表达式]             [描述]
# [ x == y ]           [ x等于y ]
# [ x < y ]            [ x小于y ]
# [ x > y ]            [ x大于y ]
# [ x <= y ]           [ x小于等于y ]
# [ x >= y ]           [ x大于等于y ]
# [ x != y ]           [ x不等于y ]
# [ x is y ]           [ x和y是同一个对象 ]
# [ x is not y ]       [ x是y是不同对象 ]
# [ x in y ]           [ x是y容器的成员 ]
# [ x not in y ]       [ x不是y容器的成员 ]
x = y = [1, 2, 3]
z = [1, 2, 3]
# x, y, z的值均相等，但x与y是同一个对象，与z是不同对象
# 输出：True
print(x == z)
# 输出：False
print(x is z)
# 输出：True
print(x is y)
# 注意：由于python内部操作对象的方式，'is'运算符的结果是不可预测的
# 序列比较：按顺序比较元素 --------------------------------------------------------------------
a = [2, [1, 3], 1]
b = [2, [1, 2], 9]
# 输出：True
print(a > b)
# 逻辑运算符：and, or, not -------------------------------------------------------------------
# and: 遇到'False'即返回，or: 遇到'True'即返回，注意短路问题
# assert: 断言，条件判断为False则出现异常 -----------------------------------------------------
percent = 10
assert 0 < percent < 100, 'percent must in 0~100'
# while循环 ---------------------------------------------------------------------------------
a = 0
while a < 5:
    print("index:", a)
    a += 1
# for循环：序列、字典、迭代器 ----------------------------------------------------------------
words = ['this', 'is', 'James']
for word in words:
    print(word)
dictDemo = {'name': 'Sam', 'age': 24}
for key in dictDemo:
    print(key, dictDemo[key])
# range(start, end): 创建一个数字列表[start, end) -------------------------------------------
names = ['James', 'Green', 'Tony']
for i in range(len(names)):
    print(names[i])
# zip(): 将多个序列压缩为一个元组序列 --------------------------------------------------------
names = ['James', 'Green', 'Tony']
ages = [32, 27, 43]
for name, age in zip(names, ages):
    print('name:', name, 'age:', age)
# break, continue --------------------------------------------------------------------------
# for循环创建列表 ---------------------------------------------------------------------------
nums = [x * x for x in range(10) if x % 3 == 0]
# 输出：[0, 9, 36, 81]
print(nums)
# del 删除不在使用的对象(名称) ---------------------------------------------------------------
x = y = {'name': 'Sam', 'age': 24}
del x
# print(x): NameError: name 'x' is not defined
# 删除的只是名称，而不是对象，因此y还是可以打印出来
# 输出：{'name': 'Sam', 'age': 24}
print(y)
# exec(): 执行字符串语句 --------------------------------------------------------------------
x = 2
y = 3
# 输出：6
exec('print(x * y)')
# eval(): 计算字符串语句并返回结果 -----------------------------------------------------------
dictStr = '{"name": "Simon", "age": 24}'
dictDemo = eval(dictStr)
# 输出：Simon
print(dictDemo["name"])


