# encoding:utf-8

# python序列Demo
# python容器类型：序列（sequence）、映射（map）、集合（set）

# 字符串是由字符组成的序列
# 正序：0, 1, ...
# 倒序：-1, -2, ...
greeting = 'hello'
# 输出：h
print(greeting[0])
# 输出：o
print(greeting[-1])

# 分片 ---------------------------------------------------------------------
# 输出：el
print(greeting[1:3])
# 输出：llo
print(greeting[-3:])
# 输出：hel
print(greeting[:3])

# 步长：遍历的间隔，默认为1
# [start:end:step] ---------------------------------------------------------
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# 输出：[1, 3, 5]
print(nums[0:6:2])
# 从右到左提取元素，步长为负数 -----------------------------------------------
# 输出：[9, 6, 3]
print(nums[8:1:-3])
# 输出：[10, 8, 6, 4, 2]
print(nums[::-2])

# 序列连接 ------------------------------------------------------------------
newNums = nums + [11, 12]
# 输出：[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
print(newNums)

# 序列乘法 ------------------------------------------------------------------
mulArr = [3] * 5
# 输出：[3, 3, 3, 3, 3]
print(mulArr)

# 成员是否存在：in [isExist = item in array] ---------------------------------
# 输出：True
print(2 in [1, 2, 3])
# 输出：False，只能检查单个成员
print([1, 2] in [1, 2, 3])
# 输出：True
print([1, 2] in [[1, 2], [3, 4]])
# 输出：True，字符串可以匹配
print('bc' in 'abcdefg')

# 序列长度[len]、最大值[max]、最小值[min] -------------------------------------
numArr = [1, 2, 3, 4, 5]
# 输出：5
print(len(numArr))
# 输出：5
print(max(numArr))
# 输出：1
print(min(numArr))
# 直接比较数字
# 输出：3
print(max(1, 2, 3))

# 列表：list [] --------------------------------------------------------------
# list(): 创建列表 -----------------------------------------------------------
strArr = list('hello')
# 输出：['h', 'e', 'l', 'l', 'o']
print(strArr)
# join(): 使用字符连一个接字符串列表 -------------------------------------------
# 输出：h-e-l-l-o
print('-'.join(strArr))
# 新建长度为10的None列表 ------------------------------------------------------
arr = [None] * 10
arr[0] = 1
arr[1] = 'hel'
# 输出：arr[0:3]: [1, 'hel', None]
print("arr[0:3]: "+str(arr[0:3]))
# del: 输出列表元素 -----------------------------------------------------------
del arr[0]
print(arr[0])
# 分片赋值(分片替换) ----------------------------------------------------------
arr = list('hello')
arr[2:] = ['a', 'a']
# 输出：['h', 'e', 'a', 'a']
print(arr)
arr[1:3] = []
# 输出：['h', 'a']
print(arr)
# 步长分片(步长不为1)：替换的列表长度必须与被替换部分长度相等 ---------------------
nums = [1, 2, 3, 4, 5]
nums[-1::-2] = [0, 0, 0]
# 输出：[0, 2, 0, 4, 0]
print(nums)
# append(): 在列表末尾添加一个对象 ---------------------------------------------
nums = [1, 2, 3]
nums.append(4)
# 输出：[1, 2, 3, 4]
print(nums)
# 列表[5, 6]将作为一个整体添加到nums的末尾
nums.append([5, 6])
# 输出：[1, 2, 3, 4, [5, 6]]，而不是：[1, 2, 3, 4, 5, 6]
print(nums)
# count(): 统计某个元素在列表中出现的次数 ---------------------------------------
nums = [1, 1, 2, 3]
# 输出：2
print(nums.count(1))
# extend(): 在列表末尾一次性追加另一个序列中的多个值 -----------------------------
# 与"+"运算符类似，但"+"是返回一个新的序列，extend()改变的是原序列
nums = [1, 2, 3]
nums.extend([4, 5])
# 输出：[1, 2, 3, 4, 5]
print(nums)
# index(): 返回列表中第一个匹配值得索引位置，找不到时会发生异常 -------------------
nums = [1, 2, 3, 4, 5]
# 输出：0
print(nums.index(1))
# insert(): 在列表指定位置添加一个对象 ------------------------------------------
nums = [1, 2, 3, 4, 5]
nums.insert(2, "hi")
# 输出：[1, 2, 'hi', 3, 4, 5]
print(nums)
# pop(): 删除列表指定位置的值(默认为最后一个)并返回该对象 -------------------------
nums = [1, 2, 3, 4, 5]
obj = nums.pop(3)
# 输出：nums = [1, 2, 3, 5], obj = 4
print("nums = " + str(nums) + ", obj = " + str(obj))
# remove(): 删除列表中第一个匹配项 ----------------------------------------------
strArr = ['abc', 'hi', 'hello']
strArr.remove('hi')
# 输出：['abc', 'hello']
print(strArr)
# reverse(): 列表元素反转 ------------------------------------------------------
nums = [1, 2, 3]
nums.reverse()
# 输出：[3, 2, 1]
print(nums)
# sort(): 序列排序，总是返回一个列表 --------------------------------------------
nums = [2, 3, 1]
nums.sort()
# 输出：[1, 2, 3]
print(nums)
# 使用排序参数 -----------------------------------------------------------------
# 'cmp': 要求实现compare(x,y)函数
# 'key': 要求列表对象存在key指定的键函数，并使用函数返回的键来排序
# 'reverse': 是否反转
strArr = ['python', 'some', 'hi', 'hello', 'add']
strArr.sort(key=len, reverse=True)
# 输出：['python', 'hello', 'some', 'add', 'hi']
print(strArr)

# 元组：() 不能修改 -------------------------------------------------------------
# 元组可以在映射中当做键来使用，也常作为内建函数的返回值
# 元组也是一种序列，拥有序列的所有方法
numTuple = 3 * (10+2,)
# 输出：(12, 12, 12)
print(numTuple)
numValue = 3 * (10+2)
# 输出：36
print(numValue)
# tuple(): 创建元组 -------------------------------------------------------------
strTuple = tuple('hello')
# 输出：('h', 'e', 'l', 'l', 'o')
print(strTuple)
# 步长分片
# 输出：('o', 'l', 'h')
print(strTuple[-1::-2])

