<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
            http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <!-- 消费方应用名，用于计算依赖关系 -->
    <dubbo:application name="dubbo-consumer"/>

    <!-- 使用zookeeper注册中心暴露服务地址 -->
    <dubbo:registry address="zookeeper://47.98.191.186:2181"/>

    <!-- 用dubbo协议在20880端口暴露服务 -->
    <!-- 1).Dubbo支持的协议:
        Dubbo协议: 默认协议, 采用单一长连接和NIO异步通信
        Hessian协议: Hessian底层采用HTTP通信, 采用Servlet暴露服务, Dubbo默认内嵌jetty作为服务器实现
        HTTP协议: 采用Spring的HttpInvoker实现
        Thrift协议: Thrift原生协议的扩展
        其他: RMI协议, WebService协议, Memcached协议, Redis协议
        === 选择: 通信数据包小、并发高的服务选择Dubbo, 数据量大选择Hessian, 要穿透防火墙选择Hessian或HTTP协议
    -->
    <!-- Dubbo服务提供者有两类线程池: I/O处理线程池和业务调度线程池 -->
    <!-- 1).dispatcher参数:
        all: 所有消息都被派发到线程池: 包括请求、响应、连接事件、断开事件、心跳等
        direct: 所有消息都不派发到线程池, 全部在I/O线程上直接执行
        message: 只有请求响应消息派发到线程池, 其他如连接断开事件、心跳等直接在I/O线程上执行
        execution: 只有请求消息派发到线程池, 其他(包含响应)消息直接在I/O线程执行
        connection: 连接断开事件在I/O线程上执行, 其他消息派发到线程池执行
    -->
    <!-- 1).threadpool参数:
        fixed: 设置固定大小的线程池
        cached: 缓存线程池, 线程空闲时间为一分钟
        limited: 池中线程数只增长, 不收缩
    -->
    <dubbo:protocol name="dubbo" port="20880" dispatcher="all" threadpool="fixed" threads="200"/>

    <!-- 生成远程服务代理，可以和本地bean一样使用demoService -->
    <!-- 集群容错模式:
        Failover: 失败自动切换, 重试其它服务器. 可通过retries="2"来设置重试次数(不含第一次)
        Failfast: 快速失败, 只发起一次调用, 失败立即报错: 通常用于非幂等性的写操作, 比如新增记录
        Failsafe: 失败安全, 出现异常时, 直接忽略: 通常用于写入审计日志等操作
        Failback: 失败自动恢复, 后台记录失败请求, 定时重发: 通常用于消息通知操作
        Forking: 并行调用多个服务器, 只要一个成功即返回. 可通过forks="2"来设置最大并行数
        Broadcast: 广播调用所有提供者, 逐个调用, 任意一台报错则报错: 通常用于通知所有提供者更新缓存或日志等本地资源信息
    -->
    <!-- 负载均衡策略:
        Random: 随机, 按权重设置随机概率
        RoundRobin: 轮循, 按公约后的权重设置轮循比率, 存在慢的提供者累积请求的问题
        LeastActive: 最少活跃调用数, 使慢的提供者收到更少请求, 因为越慢的提供者的调用前后计数差会越大
        ConsistentHash: 一致性Hash, 相同参数的请求总是发到同一提供者
    -->
    <dubbo:reference id="helloService" interface="com.demo.framework.api.HelloService"
                     cluster="failover" retries="2"
                     loadbalance="roundrobin"/>

    <bean id="productCallback" class="com.demo.framework.consumer.callback.ProductCallbackImpl"/>

    <!-- 使用url直接指定provider, 绕过注册中心 -->
    <dubbo:reference id="productService" interface="com.demo.framework.api.ProductService"
                     url="dubbo://127.0.0.1:20880">
        <!-- 异步回调的方式调用远程服务 -->
        <dubbo:method name="addProduct" async="true"
                      oninvoke="productCallback.oninvoke"
                      onreturn="productCallback.onreturn"
                      onthrow="productCallback.onthrow"/>
        <!-- Dubbo缓存类型: lru, threadlocal, jcache -->
        <dubbo:method name="getProductNames" cache="lru"/>
    </dubbo:reference>

</beans>